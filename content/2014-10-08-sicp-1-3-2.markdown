Title: sicp 1.3.2 - 1.3.3
Slug: sicp-1-3-2
Date: 2014-10-08 20:50:08 
Modified: 2014-10-08 20:50:08 
Category: blog
Tags: sicp, lisp

# 习题解答

## 练习1.34

采用替换模型进行分析:
``` Scheme
(define (f g) (g 2))
```
如果需要求值:
``` Scheme
(f f)
```
采用替换模型替换为:
``` Scheme
(f 2)
```
进一步替换为:
``` Scheme
(2 2)
```
由于2不是一个可以调用的过程，最终求值(f f)会导致运行时错误。

## 练习1.35

``` Scheme
(fixed-point (lambda(x) (+ 1 (/ 1 x)))
             1.0)
```

## 练习1.36

``` Scheme
(define (fixed-point f first-guest)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (display guess)
    (newline)
    (let ((next (f guess))
          )
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guest))
```

## 练习1.37

``` Scheme
;; Recursive version
(define (cont-frac n d k)
  (define (frac i)
    (if (= i k)
        (/ (n i) (d i))
        (/ (n i) (+ (d i) (frac (+ i 1))))))
  (frac 1))

;; Iterative version
(define (cont-frac-iter n d k)
  (define (iter i result)
    (if (= i 0)
        result
        (iter (- i 1)
              (/ (n i) (+ (d i) result)))))
  (iter k 0))
```

## 练习1.38

本题需要使用到上题实现的`cont-frac`函数：

``` Scheme
(define (D i)
  (if (= 0 (remainder (+ i 1) 3))
      (* 2.0 (/ (+ i 1) 3))
      1.0))

(define e
  (+ 2 (cont-frac (lambda (i) 1.0)
                       D
                       1000)))
```

## 练习1.39

``` Scheme
(define (d k)
  (- (* k 2) 1))

(define (tan-cf x k)
  (define (tan-cf-recursive i)
    (if (= i k)
        (/ (square x)
           (d i))
        (/ (square x)
           (- (d i) (tan-cf-recursive (+ i 1))))))
  (/ (tan-cf-recursive 1) x))
```