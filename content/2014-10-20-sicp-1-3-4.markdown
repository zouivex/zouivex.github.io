Title: sicp 1.3.4
Slug: sicp-1-3-4
Date: 2014-10-20 21:46:00
Modified: 2014-10-20 21:46:00
Category: blog
Tags: sicp, lisp

#导读

本节先介绍了在`Scheme`中过程如何作为返回值使用以获得丰富的表达力。然后介绍“牛顿法”求方程的解。最后详细说明了函数式语言中，过程是如何作为第一等对象的。

#习题解答

## 练习1.40

本题的解答很直接，将方程用`Scheme`语言描述出来即可：

``` Scheme
(define (cubic a b c)
  (lambda(x)
    (+ (* x x x) (* a x x) (* b x) c)))
```

## 练习1.41

`double`的定义如下：
``` Scheme
(define (double g)
  (lambda(x) (g (g x)) ))
```
`(((double (double double)) inc) 5)`的求值结果为`21`。

## 练习1.42

``` Scheme
(define (compose f g)
  (lambda(x)
    (f (g x))))
```

## 练习1.43

``` Scheme
(define (repeated f n)
  (define (iter i result)
    (if (= i n)
        result
        (iter (+ i 1) (compose result f))))
  (iter 1 f))
```

## 练习1.44

平滑函数定义如下：
``` Scheme
(define (smooth f)
  (lambda(x)
    (/ (+ (f x) (f (- x dx)) (f (+ x dx)))
       3)))
```

采用前例中实现的`repeated`函数实现给定函数的`n`次平滑函数：

``` Scheme
(define (nth-smooth f n)
  ((repeated smooth n) f))
```
