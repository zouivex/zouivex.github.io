Title: sicp 2.3.2
Slug: sicp-2-3-2
Date: 2015-01-02 21:11:21
Modified: 2015-01-02 21:11:21
Category: sicp
Tags: Scheme

# 习题解答

## 练习2.56
``` Scheme
(define (exponentiation? exp)
  (and (pair? exp) (eq? (car exp) '**)))

(define (base exp)
  (cadr exp))

(define (exponent exp)
  (caddr exp))

(define (make-exponentiation base exponent)
  (cond ((=number? exponent 0) 1)
        ((=number? exponent 1) base)
        (else
         (list '** base exponent))))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exponentiation? exp)
         (make-product
          (make-product
           (exponent exp)
           (make-exponentiation (base exp)
                                (- (exponent exp) 1)))
          (deriv (base exp) var)))
        (else
         (error "Unknown expression type" exp))))
```

## 练习2.57

``` Scheme
(define (augend s)
  (let ((len (length s)))
    (if (= len 3)
        (caddr s)
        (cons '+ (cddr s)))))

(define (multiplicand p)
  (let ((len (length p)))
    (if (= len 3)
        (caddr p)
        (cons '* (cddr p)))))
```
